import { transactions } from "../db/transactions.js"

/**
 * GET /api/transactions
 * ---------------------
 * Retrieve a list of all transactions.
 *
 * Optional Query Parameters:
 * - type: Filter transactions by type. Valid values are "Stake", "Borrow", or "Lend".
 *
 * Success Response:
 * - 200 OK: Returns an array of transactions (filtered if query param is used).
 *
 * Error Response:
 * - 400 Bad Request: Returned if an invalid type value is provided.
 */
export const index = (req, res) => {
  const validTypes = ["Stake", "Borrow", "Lend"];
  const { type } = req.query;

  if (type && !validTypes.includes(type)) {
    return res.status(400).json({ error: "Invalid type value" });
  }

  const filteredTransactions = type
    ? transactions.filter((transaction) => transaction.transactionType === type)
    : transactions;

  return res.status(200).json(filteredTransactions)
}

/**
 * GET /api/transactions/:id
 * -------------------------
 * Retrieve a specific transaction by its ID.
 *
 * URL Parameters:
 * - id: The unique identifier of the transaction to retrieve.
 *
 * Success Response:
 * - 200 OK: Returns the transaction object.
 *
 * Error Response:
 * - 404 Not Found: Returned if no transaction exists with the given ID.
 */
export const fetchById = (req, res) => {
  const id = Number(req.params.id);

  const transaction = transactions.find((transaction) => transaction.id === id);

  if (!transaction) {
    return res.status(404).json({ error: "Transaction not found" });
  }

  return res.status(200).json(transaction)

}

/**
 * POST /api/transactions
 * ----------------------
 * Create a new transaction.
 *
 * Request Body:
 * - transactionType (string): Must be one of "Stake", "Borrow", or "Lend".
 * - token (string): Must be a non-empty string.
 * - amount (number): Must be a positive number.
 * - Note: The 'id' is generated by the backend and should not be included in the request.
 *
 * Success Response:
 * - 201 Created: Returns the newly created transaction object.
 *
 * Error Response:
 * - 400 Bad Request: Returned if validation fails (e.g., invalid type, empty token, or non-positive amount).
 */
export const create = (req, res) => {
  const { userName, type, token, amount } = req.body;
  const validTypes = ["Stake", "Borrow", "Lend"];

  if (!userName || !type || !token || !amount) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  if (typeof token !== "string" || token.trim() === "") {
    return res.status(400).json({ error: "Invalid token value" });
  }

  if (typeof amount !== "number" || amount <= 0) {
    return res.status(400).json({ error: "Invalid amount value" });
  }

  if (type && !validTypes.includes(type)) {
    return res.status(400).json({ error: "Invalid type value" });
  }

  const newTransaction = {
    id: transactions.length + 1,
    userName,
    type,
    token,
    amount,
    date: new Intl.DateTimeFormat("en-CA", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    }).format(new Date()),
  };

  transactions.push(newTransaction);

  return res.status(201).json(newTransaction);
}